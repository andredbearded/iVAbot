import os
import logging
from datetime import datetime

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("ivabot")

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–ª–µ—Ä—Ç—ã –∞–¥–º–∏–Ω—É

# –ü–∞–º—è—Ç—å –Ω–∞ —Å–µ–∞–Ω—Å (RAM). –ù–∞ Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ‚Äî –≤—Å—ë –æ—á–∏—â–∞–µ—Ç—Å—è.
USER_STATE: dict[int, str] = {}          # user_id -> state  (NONE | ASK)
USER_LAST_QUESTIONS: dict[int, list] = {}  # –¥–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ


# ---------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask"),
            InlineKeyboardButton("‚ÑπÔ∏è –ß—Ç–æ —É–º–µ—é", callback_data="about"),
        ],
        [
            InlineKeyboardButton("üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã IVA", callback_data="programs"),
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        ],
    ])


def faq_like_answer(text: str) -> str:
    """–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª –≤–º–µ—Å—Ç–æ ChatGPT.
    –î–æ–±–∞–≤—å —Å—é–¥–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥ —Å–≤–æ–∏ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
    """
    t = text.lower()

    if any(k in t for k in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å"]):
        return (
            "–°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ —Ü–µ–Ω. "
            "–ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @your_admin (–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª) ‚Äî –ø–æ–¥—Å–∫–∞–∂—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å."
        )

    if any(k in t for k in ["pva", "phone visual artist"]):
        return "PVA ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤, –∫—Ç–æ —Å–Ω–∏–º–∞–µ—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –º—ã—Å–ª–∏—Ç –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç. (–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI)"
    if any(k in t for k in ["pps", "personal photography style"]):
        return "PPS ‚Äî –º–∞—Ä—à—Ä—É—Ç –∫ –≤–∞—à–µ–º—É –∞–≤—Ç–æ—Ä—Å–∫–æ–º—É —Å—Ç–∏–ª—é –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. (–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI)"
    if any(k in t for k in ["mfa", "fashion"]):
        return "MFA ‚Äî –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç—ã–∫–µ –º–æ–¥—ã, –≤–∏–¥–µ–æ, –∫–ª–∏–ø–æ–≤ –∏ –Ω–æ–≤—ã—Ö –º–µ–¥–∏–∞. (–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI)"
    if any(k in t for k in ["mva", "visual arts"]):
        return "MVA ‚Äî –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤. (–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI)"
    if any(k in t for k in ["pvp", "personal visual practice"]):
        return "PVP ‚Äî —Å–µ—Ä–∏—è –º–∞—Å—Ç–µ—Ä‚Äë–∫–ª–∞—Å—Å–æ–≤ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–∞–º –º–∏—Ä–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤. (–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI)"

    # fallback: –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ —Å –ø–æ–º–µ—Ç–∫–æ–π (—á—Ç–æ–±—ã —Ç—ã –≤–∏–¥–µ–ª, —á—Ç–æ –±–µ–∑ LLM)
    return f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ OpenAI). –¢—ã —Å–ø—Ä–æ—Å–∏–ª: ¬´{text}¬ª"


async def notify_admin(context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    if ADMIN_CHAT_ID:
        try:
            await context.bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=text)
        except Exception as e:
            logger.warning("Failed to notify admin: %s", e)


# ---------------- –•–ï–ù–î–õ–ï–†–´ ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATE[user.id] = "NONE"
    logger.info("User %s started bot", user.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π IVA –±–æ—Ç (–±–µ–∑ OpenAI). –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_menu_kb(),
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/health ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —è –∂–∏–≤\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–∞"
    )


async def health(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚úÖ OK. –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: " + datetime.utcnow().isoformat())


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    USER_STATE[user_id] = "NONE"
    await update.message.reply_text("–û–∫, –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=main_menu_kb())


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ACK, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    user_id = query.from_user.id

    data = query.data
    logger.info("Button '%s' from user %s", data, user_id)

    if data == "ask":
        USER_STATE[user_id] = "ASK"
        await query.edit_message_text(
            "–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –æ—Ç–≤–µ—á—É –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ OpenAI.",
        )
    elif data == "about":
        await query.edit_message_text(
            "–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç IVA: –ø–æ–∫–∞–∑—ã–≤–∞—é –º–µ–Ω—é, –ø—Ä–∏–Ω–∏–º–∞—é –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—á–∞—é –±–µ–∑ OpenAI (–∑–∞–≥–ª—É—à–∫–æ–π).\n"
            "–°–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å —É–º–Ω–µ–µ ü§ñ",
            reply_markup=main_menu_kb(),
        )
    elif data == "programs":
        await query.edit_message_text(
            "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
            "‚Ä¢ PPS ‚Äî Personal Photography Style\n"
            "‚Ä¢ PVA ‚Äî Phone Visual Artist\n"
            "‚Ä¢ PVP ‚Äî Personal Visual Practice\n"
            "‚Ä¢ MFA ‚Äî Master of Fashion Arts\n"
            "‚Ä¢ MVA ‚Äî Master of Visual Arts\n\n"
            "–°–ø—Ä–æ—Å–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ª—é–±—É—é.",
            reply_markup=main_menu_kb(),
        )
    elif data == "contacts":
        await query.edit_message_text(
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ (–ø—Ä–∏–º–µ—Ä):\n"
            "Telegram: @your_admin\nEmail: hello@example.com",
            reply_markup=main_menu_kb(),
        )
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_menu_kb())


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏."""
    user_id = update.effective_user.id
    text = update.message.text.strip()

    state = USER_STATE.get(user_id, "NONE")
    logger.info("Text from %s (state=%s): %s", user_id, state, text)

    # –ª–æ–≥–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç—å
    USER_LAST_QUESTIONS.setdefault(user_id, []).append((datetime.utcnow(), text))
    if len(USER_LAST_QUESTIONS[user_id]) > 20:
        USER_LAST_QUESTIONS[user_id] = USER_LAST_QUESTIONS[user_id][-20:]

    if state == "ASK":
        # —Ç—É—Ç ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª –≤–º–µ—Å—Ç–æ LLM
        answer = faq_like_answer(text)
        await update.message.reply_text(answer, reply_markup=main_menu_kb())
        USER_STATE[user_id] = "NONE"
    else:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await update.message.reply_text(
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
            reply_markup=main_menu_kb(),
        )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled exception: %s", context.error)
    # —É–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    await notify_admin(context, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É –±–æ—Ç–∞: {context.error}")


# ---------------- MAIN ----------------
def main() -> None:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("health", health))
    application.add_handler(CommandHandler("cancel", cancel))

    # –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(on_button))

    # —Ç–µ–∫—Å—Ç—ã
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    # –æ—à–∏–±–∫–∏
    application.add_error_handler(error_handler)

    logger.info("Bot started")
    application.run_polling(close_loop=False)


if __name__ == "__main__":
    main()