import os
import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("ivabot")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

# ---------- –ü–ê–ú–Ø–¢–¨ ----------
user_modes = {}

MODE_FREE = "free_chat"
MODE_COURSE = "course_picker"

MAIN_KEYBOARD = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton("üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç", callback_data=MODE_FREE)],
        [InlineKeyboardButton("üéì –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data=MODE_COURSE)],
        [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset")],
    ]
)

# ---------- "–§–ï–ô–ö–û–í–´–ï" –û–¢–í–ï–¢–´ ----------
FAKE_FREE_RESPONSES = [
    "–Ø –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ üòå",
    "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
    "–Ø —É—á—É—Å—å –±—ã—Ç—å —É–º–Ω—ã–º –±–æ—Ç–æ–º!",
]

FAKE_COURSE_RESPONSES = [
    "–¢–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç –∫—É—Ä—Å PVA ‚Äî –¥–ª—è —Å—ä–µ–º–∫–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω üì±",
    "–ü–æ—Ö–æ–∂–µ, —Ç–µ–±–µ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω –∫—É—Ä—Å PPP ‚Äî –æ—Å–Ω–æ–≤—ã —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞ üì∏",
    "–ü–æ—Å–º–æ—Ç—Ä–∏ –∫—É—Ä—Å MFA ‚Äî –ø—Ä–æ —Ñ—ç—à–Ω –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ‚ú®",
]


def get_fake_response(mode: str) -> str:
    import random
    if mode == MODE_COURSE:
        return random.choice(FAKE_COURSE_RESPONSES)
    return random.choice(FAKE_FREE_RESPONSES)


# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_modes[user_id] = MODE_FREE
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤.\n–ü–æ–∫–∞ —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ üôÇ",
        reply_markup=MAIN_KEYBOARD,
    )


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "reset":
        user_modes[user_id] = MODE_FREE
        await query.edit_message_text(
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KEYBOARD
        )
    else:
        user_modes[user_id] = query.data
        await query.edit_message_text(
            f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω: {query.data}", reply_markup=MAIN_KEYBOARD
        )


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mode = user_modes.get(user_id, MODE_FREE)
    response = get_fake_response(mode)
    await update.message.reply_text(response, reply_markup=MAIN_KEYBOARD)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –º–µ–Ω—é\n/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Exception while handling an update: %s", context.error)


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(error_handler)
    logger.info("Bot started (test mode)")
    app.run_polling()


if __name__ == "__main__":
    main()